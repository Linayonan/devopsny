name: Build Test and Depoly Application

on:
  workflow_dispatch:
    inputs:
      log_errors:
        description: 'Log errors if tests fail'
        required: true
        default: 'true'
  
env:
      DOCKER_IMAGE_NAME: linayonan/linadockerrepo 
      SMHI_URL: "https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/18.0686/lat/59.3293/data.json"
      
jobs:
  fetch_and_extract_temperature: 
    name: Fetch Weather Data and Extract Temperature
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
         python -m pip install --upgrade pip
         pip install -r requirements.txt
    
    - name: Integration test against SMHI API
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" "$SMHI_URL")
        if [ "$response" -eq 200 ]; then
          echo "API is reachable and returned status 200"
        else
          echo "Error: API is not reachable or returned status $response" >&2
          exit 1
        fi
    
    - name: Fetch data from SMHI API
      env:
          SMHI_API_KEY: ${{ secrets.SMHI_API_KEY }}
      run: |
          curl -s "$SMHI_URL" -o weather_data.json 
          echo "Fetched data from SMHI API."

    - name: Display fetched data
      run: cat weather_data.json  

    - name: Extract temperature from weather data
      run: |
        TEMP=$(jq '.timeSeries[0].parameters[] | select(.name == "t") .values[0]' weather_data.json)
        if [ -n "$TEMP" ]; then
          echo "Extracted Temperature: $TEMP"
          echo "TEMP=$TEMP" >> $GITHUB_ENV
        else
          echo "Error: Temperature not found" >&2
          exit 1
        fi

    - name: Run tests with pytest  #####pytest
      run: |
        pytest > test-output.log || echo "Test failed. Check logs." > test-output.log

    - name: Upload error logs
      if: ${{ github.event.inputs.log_errors == 'true' && failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: error-logs
        path: test-output.log
  
  build_docker_image:
      name: Build and Push Docker Image till Docker Gub
      runs-on: ubuntu-latest
      needs: fetch_and_extract_temperature

      steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}

 
